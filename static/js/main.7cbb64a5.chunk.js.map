{"version":3,"sources":["assets/1.jpg","assets/2.jpg","assets/3.jpg","assets/4.jpg","assets/5.jpg","Slider.js","Dots.js","ContentComp.js","data/data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Slider","sliderArr","nextDot","prevDot","state","setState","x","setX","isSwiping","startX","slide","useRef","basicPos","diff","swipeStart","e","target","className","pageX","swipeMove","transformMatrix","Math","round","window","innerWidth","current","getComputedStyle","transform","split","trim","swipeEnd","useEffect","PointerEvent","addEventListener","removeEventListener","map","item","index","key","style","id","onClick","length","icon","faChevronLeft","faChevronRight","Dots","handleClick","bind","ContentCopm","src","draggable","width","alt","img1","img2","img3","img4","img5","stateObj","Object","fromEntries","n","App","useState","currentControl","setCurrentControl","num","1","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cbb64a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.334a207c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.76798903.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.f492a9dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.e4c4d38e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.0ea2727d.jpg\";","import React, {useRef, useEffect} from 'react';\r\nimport './slider.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport const Slider = ({\r\n    sliderArr,\r\n    nextDot,\r\n    prevDot,\r\n    state,\r\n    setState,\r\n    x,\r\n    setX\r\n}) => {\r\n\r\n    const goLeft = () => {           \r\n        x === 0\r\n            ? setX(-100 * (sliderArr.length - 1))\r\n            : setX(x + 100);\r\n        \r\n        if (x === 0) {\r\n            setState(sliderArr.length) \r\n            prevDot(sliderArr.length + 1);\r\n        } else {\r\n            setState(state - 1);\r\n            prevDot(state);\r\n        }         \r\n    }\r\n\r\n    const goRight = () => {          \r\n        x === -100 * (sliderArr.length - 1)\r\n            ? setX(0)\r\n            : setX(x - 100)   \r\n            \r\n        if (x === -100 * (sliderArr.length - 1)) {\r\n            setState(1)\r\n            nextDot(0); \r\n        } else {\r\n            setState(state + 1);\r\n            nextDot(state)\r\n        }     \r\n    }\r\n\r\n    let isSwiping = false;\r\n    let startX = null;\r\n    const slide = useRef(null);\r\n    let basicPos = x;\r\n    let diff = null;\r\n   \r\n    const swipeStart = (e) => {\r\n        if (e.target.className === 'content') {\r\n            startX = e.pageX;\r\n            isSwiping = true;  \r\n            basicPos = x;\r\n        }                       \r\n    }\r\n\r\n    const swipeMove = e => {\r\n        if (isSwiping) {\r\n            if (e.target.className === 'content') {\r\n                let transformMatrix = 0;\r\n                diff = Math.round((e.pageX - startX) / window.innerWidth * 100);\r\n                // if (diff > 0 && x === 0) {\r\n                //     // console.log('diff > 0')\r\n                //     console.log(x)\r\n                //     diff = null;\r\n                // } else {\r\n                   \r\n                    if (slide.current) {\r\n                        transformMatrix = window.getComputedStyle(slide.current).transform.split(',')[4].trim() / window.innerWidth * 100;                        \r\n                    }\r\n                     setX(Math.round(transformMatrix + diff));   \r\n                // }\r\n                          \r\n            }              \r\n        }           \r\n    }\r\n\r\n    const swipeEnd = (e) => {\r\n        if (e.target.className === 'content') {\r\n            isSwiping = false;\r\n            if (diff && diff < 0) {\r\n                setX(basicPos - 100);               \r\n                setState(state + 1);\r\n                nextDot(state)\r\n            }\r\n            if (diff && diff > 0 && x !== 0) {\r\n                setX(basicPos + 100)\r\n                setState(state - 1);\r\n                prevDot(state)\r\n            }       \r\n        }            \r\n    }\r\n  \r\n\r\n    useEffect(() => {\r\n        if (window.PointerEvent) {\r\n            window.addEventListener('pointerdown', swipeStart);    \r\n            window.addEventListener('pointermove', swipeMove);\r\n            window.addEventListener('pointerup', swipeEnd);\r\n        } else {\r\n            window.addEventListener('mousedown', swipeStart);    \r\n            window.addEventListener('mousemove', swipeMove);\r\n            window.addEventListener('mouseup', swipeEnd);\r\n        }\r\n        \r\n        \r\n\r\n        // window.addEventListener('touchdown', swipeStart);    \r\n        // window.addEventListener('touchmove', swipeMove);\r\n        // window.addEventListener('touchup', swipeEnd);\r\n\r\n        return () => {\r\n            window.removeEventListener('mousedown', swipeStart);     \r\n            window.removeEventListener('pointerdown', swipeStart);  \r\n            // window.removeEventListener('touchdown', swipeStart);    \r\n        }\r\n    })\r\n   \r\n\r\n    \r\n    return (\r\n        <div className='slider'>\r\n            {sliderArr.map((item, index) => {\r\n                return (\r\n                    <div\r\n                        key={index}\r\n                        className='slide'                        \r\n                        style={{\r\n                        transform: `translateX(${x}%)`\r\n                    }}>\r\n                        {item}\r\n                    </div>\r\n                )\r\n            })}\r\n            <button id='goLeft' onClick={goLeft}>\r\n                <FontAwesomeIcon icon={faChevronLeft}/>\r\n            </button>\r\n            <button id='goRight' onClick={goRight}>\r\n                <FontAwesomeIcon icon={faChevronRight}/>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './dots.scss';\r\n\r\n\r\nexport const Dots = ({    \r\n    sliderArr,\r\n    state,\r\n    handleClick    \r\n}) => {   \r\n  \r\n    return (\r\n        <div className='dots-cont'>\r\n            {\r\n                sliderArr.map((item, index) => {\r\n                    return (\r\n                        <div\r\n                            onClick={handleClick.bind(null, index+1)}\r\n                            key={index}\r\n                            id={index + 1}\r\n                            className={state[index+1] ? 'dot-item active' : 'dot-item'}\r\n                        ></div>\r\n                    )\r\n                })\r\n           }           \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const ContentCopm = ({src}) => {\r\n    return (\r\n        <img src={src} draggable={false} style={{width: '100%'}} className='content' alt='slide-img' />\r\n    )\r\n}","import React from 'react';\r\nimport { ContentCopm } from '../ContentComp';\r\n\r\n//pics\r\nimport img1 from '../assets/1.jpg';\r\nimport img2 from '../assets/2.jpg';\r\nimport img3 from '../assets/3.jpg';\r\nimport img4 from '../assets/4.jpg';\r\nimport img5 from '../assets/5.jpg';\r\n\r\n\r\nexport let sliderArr = [\r\n  <ContentCopm src={img1} />,\r\n  <ContentCopm src={img2} />,\r\n  <ContentCopm src={img3} />,\r\n  <ContentCopm src={img4} />,\r\n  <ContentCopm src={img5} />\r\n];\r\n","import React, {useEffect, useState} from 'react';\nimport { Slider } from './Slider';\nimport { Dots } from './Dots';\nimport { sliderArr } from './data/data';\n\nconst stateObj = Object.fromEntries(sliderArr.map(n => [n, false]));\nstateObj[1] = true;\n\nconst App = () => { \n  const [state, setState] = useState(stateObj);\n  const [currentControl, setCurrentControl] = useState(1);\n  const [x, setX] = useState(0);  \n\n  const handleClick = (id) => {          \n    setState({ ...stateObj, 1: false, [id]: true });\n    setCurrentControl(id);\n    setX((id -1)* -100);\n    \n  }\n  const nextDot = (num) => {        \n    setState({...stateObj, 1: false,  [num+1]: true});\n  }\n  const prevDot = (num) => {        \n    setState({...stateObj, 1: false,  [num-1]: true});\n  }\n  \n  return (\n    <div className=\"App\" >     \n      <Slider\n        sliderArr={sliderArr}\n        nextDot={nextDot}\n        prevDot={prevDot}\n        state={currentControl}\n        setState={setCurrentControl}\n        x={x}\n        setX={setX}\n        />\n      <Dots\n        sliderArr={sliderArr}\n        state={state}\n        handleClick={handleClick}       \n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}