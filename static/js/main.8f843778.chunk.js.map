{"version":3,"sources":["assets/1.jpg","assets/2.jpg","assets/3.jpg","assets/4.jpg","assets/5.jpg","Slider.js","ContentComp.js","Dots.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Slider","sliderArr","nextDot","prevDot","state","setState","x","setX","className","map","item","index","key","style","transform","id","onClick","length","icon","faChevronLeft","faChevronRight","ContentCopm","src","width","objectFit","alt","Dots","handleClick","bind","img1","img2","img3","img4","img5","stateObj","Object","fromEntries","n","App","useState","currentControl","setCurrentControl","1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,sOCM9BC,EAAS,SAAC,GAQhB,IAPHC,EAOE,EAPFA,UACAC,EAME,EANFA,QACAC,EAKE,EALFA,QACAC,EAIE,EAJFA,MACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,EACAC,EACE,EADFA,KAkCA,OACI,yBAAKC,UAAU,UACVP,EAAUQ,KAAI,SAACC,EAAMC,GAClB,OACI,yBACIC,IAAKD,EACLH,UAAU,QACVK,MAAO,CACPC,UAAU,cAAD,OAAgBR,EAAhB,QAERI,MAIb,4BAAQK,GAAG,SAASC,QA1Cb,WAELT,EADA,IAAND,GACY,KAAOL,EAAUgB,OAAS,GAC3BX,EAAI,KAEL,IAANA,GACAD,EAASJ,EAAUgB,QACnBd,EAAQF,EAAUgB,OAAS,KAE3BZ,EAASD,EAAQ,GACjBD,EAAQC,MAiCJ,kBAAC,IAAD,CAAiBc,KAAMC,OAE3B,4BAAQJ,GAAG,UAAUC,QA/Bb,WACZV,KAAO,KAAOL,EAAUgB,OAAS,GAC3BV,EAAK,GACLA,EAAKD,EAAI,KAEXA,KAAO,KAAOL,EAAUgB,OAAS,IACjCZ,EAAS,GACTH,EAAQ,KAERG,EAASD,EAAQ,GACjBF,EAAQE,MAsBJ,kBAAC,IAAD,CAAiBc,KAAME,SC/D1BC,EAAc,SAAC,GAAW,IAAVC,EAAS,EAATA,IACzB,OACI,yBAAKA,IAAKA,EAAKT,MAAO,CAACU,MAAO,OAAQC,UAAW,WAAYhB,UAAU,UAAUiB,IAAI,eCAhFC,G,YAAO,SAAC,GAId,IAHHzB,EAGE,EAHFA,UACAG,EAEE,EAFFA,MACAuB,EACE,EADFA,YAGA,OACI,yBAAKnB,UAAU,aAEPP,EAAUQ,KAAI,SAACC,EAAMC,GACjB,OACI,yBACIK,QAASW,EAAYC,KAAK,KAAMjB,EAAM,GACtCC,IAAKD,EACLI,GAAIJ,EAAQ,EACZH,UAAWJ,EAAMO,EAAM,GAAK,kBAAoB,mB,qFCLxEV,EAAY,CACd,kBAAC,EAAD,CAAaqB,IAAKO,MAClB,kBAAC,EAAD,CAAaP,IAAKQ,MAClB,kBAAC,EAAD,CAAaR,IAAKS,MAClB,kBAAC,EAAD,CAAaT,IAAKU,MAClB,kBAAC,EAAD,CAAaV,IAAKW,OAGdC,EAAWC,OAAOC,YAAYnC,EAAUQ,KAAI,SAAA4B,GAAC,MAAI,CAACA,GAAG,OAC3DH,EAAS,IAAK,EAEd,IAqCeI,EArCH,WAAO,IAAD,EACUC,mBAASL,GADnB,mBACT9B,EADS,KACFC,EADE,OAE4BkC,mBAAS,GAFrC,mBAETC,EAFS,KAEOC,EAFP,OAGEF,mBAAS,GAHX,mBAGTjC,EAHS,KAGNC,EAHM,KAiBhB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEP,UAAWA,EACXC,QAXU,SAACa,GACfV,EAAS,2BAAI6B,GAAL,gBAAeQ,GAAG,GAAS3B,EAAG,GAAI,MAWtCZ,QATU,SAACY,GACfV,EAAS,2BAAI6B,GAAL,gBAAeQ,GAAG,GAAS3B,EAAG,GAAI,MAStCX,MAAOoC,EACPnC,SAAUoC,EACVnC,EAAGA,EACHC,KAAMA,IAER,kBAAC,EAAD,CACEN,UAAWA,EACXG,MAAOA,EACPuB,YA1Bc,SAACZ,GACnBV,EAAS,2BAAK6B,GAAN,gBAAgBQ,GAAG,GAAQ3B,GAAK,KACxC0B,EAAkB1B,GAClBR,GAAe,KAATQ,EAAI,SCrBM4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f843778.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.334a207c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.76798903.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.f492a9dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.e4c4d38e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.0ea2727d.jpg\";","import React, {useState} from 'react';\r\nimport './slider.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nexport const Slider = ({\r\n    sliderArr,\r\n    nextDot,\r\n    prevDot,\r\n    state,\r\n    setState,\r\n    x,\r\n    setX\r\n}) => {\r\n\r\n  \r\n   \r\n\r\n    const goLeft = () => {           \r\n        x === 0\r\n            ? setX(-100 * (sliderArr.length - 1))\r\n            : setX(x + 100);\r\n        \r\n        if (x === 0) {\r\n            setState(sliderArr.length) \r\n            prevDot(sliderArr.length + 1);\r\n        } else {\r\n            setState(state - 1);\r\n            prevDot(state);\r\n        }         \r\n    }\r\n\r\n    const goRight = () => {          \r\n        x === -100 * (sliderArr.length - 1)\r\n            ? setX(0)\r\n            : setX(x - 100)   \r\n            \r\n        if (x === -100 * (sliderArr.length - 1)) {\r\n            setState(1)\r\n            nextDot(0); \r\n        } else {\r\n            setState(state + 1);\r\n            nextDot(state)\r\n        }     \r\n    }\r\n    \r\n    return (\r\n        <div className='slider'>\r\n            {sliderArr.map((item, index) => {\r\n                return (\r\n                    <div\r\n                        key={index}\r\n                        className='slide'                        \r\n                        style={{\r\n                        transform: `translateX(${x}%)`\r\n                    }}>\r\n                        {item}\r\n                    </div>\r\n                )\r\n            })}\r\n            <button id='goLeft' onClick={goLeft}>\r\n                <FontAwesomeIcon icon={faChevronLeft}/>\r\n            </button>\r\n            <button id='goRight' onClick={goRight}>\r\n                <FontAwesomeIcon icon={faChevronRight}/>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const ContentCopm = ({src}) => {\r\n    return (\r\n        <img src={src} style={{width: '100%', objectFit: 'content'}} className='content' alt='slide-img' />\r\n    )\r\n}","import React from 'react';\r\nimport './dots.scss';\r\n\r\n\r\nexport const Dots = ({    \r\n    sliderArr,\r\n    state,\r\n    handleClick    \r\n}) => {   \r\n  \r\n    return (\r\n        <div className='dots-cont'>\r\n            {\r\n                sliderArr.map((item, index) => {\r\n                    return (\r\n                        <div\r\n                            onClick={handleClick.bind(null, index+1)}\r\n                            key={index}\r\n                            id={index + 1}\r\n                            className={state[index+1] ? 'dot-item active' : 'dot-item'}\r\n                        ></div>\r\n                    )\r\n                })\r\n           }           \r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport { Slider } from './Slider';\nimport {ContentCopm} from './ContentComp';\nimport './app.scss';\nimport { Dots } from './Dots';\n\n//pics\nimport img1 from './assets/1.jpg';\nimport img2 from './assets/2.jpg';\nimport img3 from './assets/3.jpg';\nimport img4 from './assets/4.jpg';\nimport img5 from './assets/5.jpg';\n\n\nlet sliderArr = [\n  <ContentCopm src={img1} />,\n  <ContentCopm src={img2} />,\n  <ContentCopm src={img3} />,\n  <ContentCopm src={img4} />,\n  <ContentCopm src={img5} />\n];\n\nconst stateObj = Object.fromEntries(sliderArr.map(n => [n, false]));\nstateObj[1] = true;\n\nconst App = () => { \n  const [state, setState] = useState(stateObj);\n  const [currentControl, setCurrentControl] = useState(1);\n  const [x, setX] = useState(0);  \n\n  const handleClick = (id) => {        \n    setState({ ...stateObj, 1: false, [id]: true });\n    setCurrentControl(id);\n    setX((id -1)* -100);\n  }\n  const nextDot = (id) => {        \n    setState({...stateObj, 1: false,  [id+1]: true});\n  }\n  const prevDot = (id) => {        \n    setState({...stateObj, 1: false,  [id-1]: true});\n  }\n  \n  return (\n    <div className=\"App\" >     \n      <Slider\n        sliderArr={sliderArr}\n        nextDot={nextDot}\n        prevDot={prevDot}\n        state={currentControl}\n        setState={setCurrentControl}\n        x={x}\n        setX={setX}\n        />\n      <Dots\n        sliderArr={sliderArr}\n        state={state}\n        handleClick={handleClick}       \n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}